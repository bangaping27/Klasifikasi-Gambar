# -*- coding: utf-8 -*-
"""rockpaperscissors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbLSPrU00urFOi-HbIWwkHuh9twP0AlO

Data Informasi Pribadi
*   Nama: Rafli Anggoro
*   Email: karyabangaping@gmail.com
*   Undika (Universitas Dinamika)
*   Fakultas Teknik Informatika
*   Kabupaten Mojokerto

## **Dataset rockpaperscissors.zip Dari Dicoding**
"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""## **Mengekstrak, Menyiapkan, Mengecek, dan Menampilkan Folder/File untuk Data Gunting, Batu, dan Kertas**

Mengekstrak Data
"""

import zipfile
import os

local_zip = '/tmp/rockpaperscissors.zip'
zip = zipfile.ZipFile(local_zip, 'r')
zip.extractall('/tmp')
zip.close()

"""Menyiapkan Folder"""

folder_gunting = os.path.join('/tmp/rockpaperscissors/scissors')
folder_kertas = os.path.join('/tmp/rockpaperscissors/paper')
folder_batu = os.path.join('/tmp/rockpaperscissors/rock')

"""Mengecek Jumlah Gambar Disetiap File"""

file_gunting = os.listdir(folder_gunting)
file_kertas = os.listdir(folder_kertas)
file_batu = os.listdir(folder_batu)

#menampilkan isi/jumlah gambar pada setiap file
print("Menampilkan jumlah total gambar di setiap file")
print("gunting : ", len(file_gunting), "gambar")
print("kertas : ", len(file_kertas), "gambar")
print("batu : ", len(file_batu), "gambar")

"""Menampilkan Beberapa Gambar"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import matplotlib.image as mping
# %matplotlib inline

nrows = 3
ncols = 3

plc_index=0
fig = plt.gcf()
fig.set_size_inches(ncols * 5, nrows * 3)
plc_index +=3

gambar_gunting = [os.path.join(folder_gunting,fname)
                  for fname in file_gunting[plc_index-3 : plc_index]]
gambar_kertas = [os.path.join(folder_kertas,fname)
                  for fname in file_kertas[plc_index-3 : plc_index]]
gambar_batu = [os.path.join(folder_batu,fname)
                  for fname in file_batu[plc_index-3 : plc_index]]

for i, img_path in enumerate(gambar_gunting + gambar_batu + gambar_kertas):
  sp = plt.subplot(nrows, ncols, i+1)
  sp.axis('off')
  img = mping.imread(img_path)
  plt.imshow(img)

plt.show()

"""## **Implementasi Image Data Generator Tensorflow untuk pengolahan gambar:**"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""Proses Augmentasi & Pemisahan Data"""

basis_dir = '/tmp/rockpaperscissors/rps-cv-images/'
training_datagen = ImageDataGenerator(
                   rescale = 1./255,
                   rotation_range=45,
                   width_shift_range=0.2,
                   height_shift_range=0.2,
                   shear_range=0.2,
                   zoom_range=0.2,
                   fill_mode='nearest',
                   validation_split = 0.4
                   )

"""Pelabelan Pada Data"""

#data train
train_generator = training_datagen.flow_from_directory(
    basis_dir,
    target_size = (150,150),
    color_mode='rgb',
    class_mode = 'categorical',
    shuffle = True,
    subset = 'training'

)

#data validation
validation_generator = training_datagen.flow_from_directory(
    basis_dir,
    target_size = (150,150),
    color_mode='rgb',
    class_mode = 'categorical',
    shuffle = True,
    subset = 'validation'
)

"""## **Membangun Arsitektur CNN**

Menggunakan Model Sequential
"""

model = tf.keras.models.Sequential([

        tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),
        tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2,2),

        tf.keras.layers.Flatten(),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dense(3, activation='softmax')
        ])

#mencetak model Sequential

model.summary()

"""Menggunakan Fungsi Compile Model"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""Membuat Class Callback"""

#menggunakan callback untuk mencegah overfitting dan jika akurasi sudah terpenuhi, maka training akan dihentikan

class callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
      if(logs.get('accuracy') > 0.97):
        print("\nAkurasi telah mencapai 97% \nTraining dihentikan")
        self.model.stop_training = True

myCallbacks = callback()

"""## **Melatih** Dan Menguji Model

Menggunakan Metode Fit Untuk Melatih Model
"""

history = model.fit(
      train_generator,
      steps_per_epoch=25,
      epochs=20,
      validation_data=validation_generator,
      validation_steps=5,
      verbose=2,
      callbacks=[myCallbacks])

"""Implementasi Akurasi Data Pada Training Dan Validasi"""

import matplotlib.pyplot as plt

#menamapilkan model accuracy
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

plt.plot(acc, color='green')
plt.plot(val_acc, color='red')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

#menamapilkan model loss
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.plot(loss, color='green')
plt.plot(val_loss, color='red')
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

"""Uji Coba Model"""

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():

  #memprediksi images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=32)

  print(fn)
  if classes[0,0]==1:
    print('Tangan Ini Menunjukkan bentuk PAPER')
  elif classes[0,1]==1:
    print('Tangan Ini Menunjukkan bentuk ROCK')
  else:
    print('Tangan Ini Menunjukkan bentuk SCISSORS')